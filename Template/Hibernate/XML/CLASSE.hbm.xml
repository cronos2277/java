<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- PARA CADA ENTIDADE, SERA NECESSARIO UM "CLASSE".hbm.xml, CASO O MESMO SEJA FEITO POR NOTACAO XML. -->
<hibernate-mapping>
    <!-- 
        aqui configura classe, o name é o nome da classe ".java" 
    e o table é o nome da tabela no banco de dados. Java é case sensetive.
    -->
    <class name="SUACLASSE" table="SUA_TABELA_NO_BD">   
        
        <!-- A tag do id é diferente mesmo, mas aqui no exemplo tem o campo igual aos outros. -->      
        <id name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA">        
        <!-- Estrategia para criacao de ID, o incremente faz com que a geracao de ID seja criado pela aplicacao, nao indicado caso necessite de concorrencia. -->
            <generator class="increment"/>
        </id>
            <!-- Ou se voce quiser que a sequencia seja definida pelo banco de dados -->
        <!--
            <id name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA">
                <param name="sequence ou identity">NOME_DA_SEQUENCIA</param>
            </id>
        -->

        <!-- Faz com que o ID dessa classe seja o mesmo da classe que a esta referenciando. -->
        
            <id column="ID_DA_TABELA" name="ID_DA_CLASSE" type="int">
                <generator class="foreign">
                    <param name="property">
                        NOME_DA_INSTANCIA_DA_ENTIDADE_QUE_DEVE_GERAR_O_ID
                    </param>                
                </generator>
            </id>
        
        <!-- voce precisa da propriedade constrained="true" na tabela referenciada para funcionar direito. -->
        
            <one-to-one name="AQUI_VOCE_DEFINE_ENTIDADE_CITADA_ACIMA" constrained="true"/>
        
        <!-- Aqui eh a propriedade de cada coluna da tabela, sendo name o nome do atributo do arquivo .java informado no class="name" -->                    
        <!-- Colunm eh o campo referente ao banco de dados, no caso nesse campo você informa a qual coluna ele referencia no banco de dados. -->
        <property name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA" />
        <property name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA"/>
        <property name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA"/>
        <!-- Caso tenha uma colection na sua entidade, voce pode usar essa estrutura abaixo: -->
        <!-- Esse tipo de estrutura com o set, evita de que voce tenha que ficar criando um outro arquivo hbm.xml. -->
        <set name="NOME_ENTIDADE" table="NOME_TABELA_NO_BD">
            <key column="CHAVE_PRIMARIA_TABELA"/>
            <!-- Um element desse para cada atributo da tabela, aqui abaixo voce usa o padrao do seu banco de dados como tipo. -->
            <element column="NOME_DA_COLUNA_COM_REFERENTE_A_COLLECTION" type="string"/>
        </set>
        <!--
            O component eh uma forma de voce dividir uma tabela do banco de dados
            em duas ou mais entidade, no caso voce poderia incluir a entidade que nao
            tem a chave primaria como uma extensao. Caso todos os campos de uma tabela
            no banco de dados esteja em uma unica entidade, esse component eh desnecessario.

        -->
        <component name="O_ATRIBUTO_DO_TIPO_ENTIDADE_DA_CLASSE_JAVA_REFERENCIADO_NA_ENTIDADE-PRINCIPAL">
            <!-- Repare que a mesma suporta um property assim como o no pai -->
            <property name="ATRIBUTO_DA_ENTIDADE">
            <!-- 
                Caso o nome do atributo nao seja igual ao atributo no banco de dados, 
                voce precisa informar aqui, entre outros atributos. No caso de proprieades
                compostas use o hifen para separar como o "not-null abaixo". As propriedades
                exceto a name nao precisam refletir a realidade do banco de dados. No caso
                o atributo sera tratado como not-null, mesmo que no banco de dados nao seja assim.
            -->
                <column name="ATRIBUTO_NO_BANCO_DE_DADOS" not-null="true"></column>
            </property>
        </component>               
            <!-- 
                Dessa forma voce faz o relacionamento 1 para 1, para esse tipo relacionamento o all eh o melhor, 
                Caso seja colocado, essa one-to-one na outra entidade que referencia essa, logo temos um
                relacionamento 1 para 1 bidirecional, do contrario eh apenas unidirecional. 
        -->
        <one-to-one class="PACKAGE.ENTIDADE" name="INSTANCIA_DA_ENTIDADE" cascade="all" />
        <!-- 
            Dessa forma que voce faz o relacionamento 1 para muitos, use colunm caso o nome do atributo da chave 
            estrangeira seja diferente no banco de dados, e o campo foreign-key caso voce queira definir um 
            nome ao relacionamento, se apenas aqui o relacionamento eh unidirecional, se essa entidade referenciada
            contem isso tambem, ai eh bidirecional. Lembrando esse campo abaixo corresponde ao ID da tabela 
            ao qual esta sendo referenciada, nesse caso o hibernate criara uma chave estrangeira dentro dessa
            entidade para receber o valor de ID da outra tabela.
        -->
        <many-to-one class="PACKAGE.ENTIDADE" name="INSTANCIA_DA_ENTIDADE" cascade="all" column="idEntity" 
            foreign-key="sua_fk_nome" not-null="true" unique="true"
        />
    </class>
    <!-- 
        Caso voce queira incluir a query no arquivo xml, coloqueo dentro da tag query.
        O mesmo deve estar dentro de um CDATA para que nao seja interpolado, na hora 
        de compilar o XML, ou seja isso pode dar erro se nao estiver dentro de CDATA.
        a query deve ter pelo menos um nome, ao qual sera usado para acessar essa query
        salva aqui. 
    -->
    <query name="NOME_DA_QUERY">
        <![CDATA[ from Entidade where id = :parametro]]>
    </query>
</hibernate-mapping>
<!-- APAGUE OS COMENTARIOS QUANDO USAR O TEMPLATE, PARA EVITAR ERROS DE COMPILACAO. -->