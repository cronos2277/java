<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- PARA CADA ENTIDADE, SERA NECESSARIO UM "CLASSE".hbm.xml, CASO O MESMO SEJA FEITO POR NOTACAO XML. -->
<hibernate-mapping>
    <!-- 
        aqui configura classe, o name é o nome da classe ".java" 
    e o table é o nome da tabela no banco de dados. Java é case sensetive.
    -->
    <class name="SUACLASSE" table="SUA_TABELA_NO_BD">   
        
        <!-- A tag do id é diferente mesmo, mas aqui no exemplo tem o campo igual aos outros. -->      
        <id name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA">        
        <!-- Estrategia para criacao de ID, o incremente faz com que a geracao de ID seja criado pela aplicacao, nao indicado caso necessite de concorrencia. -->
            <generator class="increment"/>
        </id>
            <!-- Ou se voce quiser que a sequencia seja definida pelo banco de dados -->
        <!--
            <id name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA">
                <param name="sequence ou identity">NOME_DA_SEQUENCIA</param>
            </id>
        -->

        <!-- Aqui eh a propriedade de cada coluna da tabela, sendo name o nome do atributo do arquivo .java informado no class="name" -->                    
        <!-- Colunm eh o campo referente ao banco de dados, no caso nesse campo você informa a qual coluna ele referencia no banco de dados. -->
        <property name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA" />
        <property name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA"/>
        <property name="ATRIBUTO_CLASSE" column="ATRIBUTO_TABELA"/>
        <!-- Caso tenha uma colection na sua entidade, voce pode usar essa estrutura abaixo: -->
        <!-- Esse tipo de estrutura com o set, evita de que voce tenha que ficar criando um outro arquivo hbm.xml. -->
        <set name="NOME_ENTIDADE" table="NOME_TABELA_NO_BD">
            <key column="CHAVE_PRIMARIA_TABELA"/>
            <!-- Um element desse para cada atributo da tabela, aqui abaixo voce usa o padrao do seu banco de dados como tipo. -->
            <element column="NOME_DA_COLUNA_COM_REFERENTE_A_COLLECTION" type="string"/>
        </set>
        <!--
            O component eh uma forma de voce dividir uma tabela do banco de dados
            em duas ou mais entidade, no caso voce poderia incluir a entidade que nao
            tem a chave primaria como uma extensao. Caso todos os campos de uma tabela
            no banco de dados esteja em uma unica entidade, esse component eh desnecessario.

        -->
        <component name="O_ATRIBUTO_DO_TIPO_ENTIDADE_DA_CLASSE_JAVA_REFERENCIADO_NA_ENTIDADE-PRINCIPAL">
            <!-- Repare que a mesma suporta um property assim como o no pai -->
            <property name="ATRIBUTO_DA_ENTIDADE">
            <!-- 
                Caso o nome do atributo nao seja igual ao atributo no banco de dados, 
                voce precisa informar aqui, entre outros atributos. No caso de proprieades
                compostas use o hifen para separar como o "not-null abaixo". As propriedades
                exceto a name nao precisam refletir a realidade do banco de dados. No caso
                o atributo sera tratado como not-null, mesmo que no banco de dados nao seja assim.
            -->
                <column name="ATRIBUTO_NO_BANCO_DE_DADOS" not-null="true"></column>
            </property>
        </component>               
            <!-- 
                Dessa forma voce faz que voce usa a notacao one para one no hibernate, 
                Voce especifica no class a entidade a ser relacionada aqui, e no name
                voce especifica o nome da instancia da entidade. Lembrando que a sua
                entidade, a que foi estipulada no name la em cima, deve ter uma instancia
                dessa Entidade que esta sendo referenciada aqui. Por debaixo dos panos
                o hibernate faz um join entre as tabelas no banco de dados de maneira
                automatica, isso quando resgata valores do banco, ao modificar precisa
                do cascade para definir como isso sera feito. Voce tambem pode colocar 
                esse one-to-one na outra entidade, fazendo assim um one-to-one bidirecional.
                O Cascade informa como sera feito esse relacionamento, entre as entidades
                existe varias formas de estabelecer esse relacionamento, nesse caso qualquer 
                alteracao feito na instancia, se reflitira na tabela ao qual a instancia
                pertence. Por exemplo se o cascade for save ou update, qualquer valor
                atualizado na instancia sera refletido na tupla no Banco de dados ao fim da 
                transacao. Caso voce nao informe o cascade, caso voce insira ou atualiza
                algum valor na instancia, o mesmo nao ira ser registrado na tupla, exceto
                que voce faca outra transacao, ao qual voce fara usando a outra entidade
                ao qual eh referenciada abaixo. De toda forma para que o relacionamento
                funcione em operacoes como insercao, remocao ou atualizacao, o mesmo
                deve ser definido com o cascade, do contrario essa relacao apenas 
                acontecera quando a aplicacao ler dados.
                one-to-one -> cria um join, assim sendo a relacao ocorre apenas em relacoes
                do tipo select. Ou seja quando eh feito a conexao e o acesso aos dados.
                cascade -> define o relacionamento das entidades, nesse caso como que 
                as alteracoes feitas nas instancias se refletirao na tupla da tabela
                ao qual a entidade referenciada representa, podendo estabelecer algum
                tipo de restricao, ou seja apenas inserir, crud completo, ou apenas
                atualizacao e insercao por exemplo. Quando com o valor all, logo eh tudo,
                ou seja o que for feito na instancia se refletira na tupla, independente
                do que acontecao com o valor, podendo ser perigoso na exclusao por exemplo.
            -->
        <one-to-one class="PACKAGE.ENTIDADE" name="INSTANCIA_DA_ENTIDADE" cascade="all"/>
    </class>
    <!-- 
        Caso voce queira incluir a query no arquivo xml, coloqueo dentro da tag query.
        O mesmo deve estar dentro de um CDATA para que nao seja interpolado, na hora 
        de compilar o XML, ou seja isso pode dar erro se nao estiver dentro de CDATA.
        a query deve ter pelo menos um nome, ao qual sera usado para acessar essa query
        salva aqui. 
    -->
    <query name="NOME_DA_QUERY">
        <![CDATA[ from Entidade where id = :parametro]]>
    </query>
</hibernate-mapping>
<!-- APAGUE OS COMENTARIOS QUANDO USAR O TEMPLATE, PARA EVITAR ERROS DE COMPILACAO. -->